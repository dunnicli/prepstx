// Just Mint: For testing response locally

import { useState, useEffect } from "react";
//import { create } from "ipfs-http-client";
import Link from "next/link";
import Head from "next/head";
import {
  AppConfig,
  UserSession,
  showConnect,
  openContractCall,
} from "@stacks/connect";
import {
  NonFungibleConditionCode,
  FungibleConditionCode,
  createAssetInfo,
  makeStandardNonFungiblePostCondition,
  makeStandardSTXPostCondition,
  stringAsciiCV,
  standardPrincipalCV,
} from "@stacks/transactions";
import { StacksMocknet, StacksTestnet } from "@stacks/network";

export default function CreateItem() {
  const appConfig = new AppConfig(["publish_data"]);
  const userSession = new UserSession({ appConfig });
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(true);
  const [userData, setUserData] = useState({});
  const [loggedIn, setLoggedIn] = useState(false);
  const [nftRecipient, setNftRecipient] = useState("");
  const [url, setUrl] = useState("");
  const [txId, setTxId] = useState("");

  const network = new StacksMocknet();

  const [formInput, updateFormInput] = useState({
    recipient: "",
    theUrl: "",
  });

  async function createNft() {
    setNftRecipient(formInput.recipient);
    setUrl(formInput.theUrl);
    /* next, create the item */
    const clarityRecipient = standardPrincipalCV(formInput.recipient);
    const clarityUri = stringAsciiCV(formInput.theUrl);
    //Testnet Contract
    //const assetAddress = "ST12H4ANQQ2NGN96KB0ZYVDG02NWT99A9TPE22SP9";
    //Mocknet Contract
    const assetAddress = "ST3H0F71SQXP2APJX29HBQN4FAZP5H0W564KD9ZDS";

    const functionArgs = [clarityRecipient, clarityUri];
    const postConditionAddress =
      userSession.loadUserData().profile.stxAddress.testnet;
    const nftPostConditionCode = NonFungibleConditionCode.Owns;
    const assetContractName = "acatv4";
    const assetName = "acat";
    const tokenAssetName = stringAsciiCV("acat");
    const nonFungibleAssetInfo = createAssetInfo(
      assetAddress,
      assetContractName,
      assetName
    );

    const stxConditionCode = FungibleConditionCode.LessEqual;
    const stxConditionAmount = 100000000; // denoted in microstacks

    const postConditions = [
      makeStandardNonFungiblePostCondition(
        postConditionAddress,
        nftPostConditionCode,
        nonFungibleAssetInfo,
        tokenAssetName
      ),
      makeStandardSTXPostCondition(
        postConditionAddress,
        stxConditionCode,
        stxConditionAmount
      ),
    ];
    const options = {
      contractAddress: assetAddress,
      contractName: "acatv4",
      functionName: "mint",
      functionArgs,
      network,
      postConditions,
      appDetails: {
        name: "Acat V4",
        icon: "",
      },
      onFinish: (data) => {
        console.log(data);
        setTxId(data.txId);
      },
    };

    await openContractCall(options);
  }

  function authenticate() {
    showConnect({
      appDetails: {
        name: "Acat V4",
        icon: "",
      },
      redirectTo: "/",
      onFinish: () => {
        window.location.reload();
      },
      userSession,
    });
  }

  useEffect(() => {
    if (userSession.isSignInPending()) {
      userSession.handlePendingSignIn().then((userData) => {
        setUserData(userData);
      });
    } else if (userSession.isUserSignedIn()) {
      setLoggedIn(true);
      setUserData(userSession.loadUserData());
    }
  }, []);

  return (
    <div className="flex p-4">
      <Head>
        <title>Just Mint - Testing - Local</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-1/2 flex flex-col pb-12">
        <p>&nbsp;</p>
        <p>
          <Link href="/">Home</Link>
        </p>
        <p>&nbsp;</p>
        <p className="px-20 py-10 text-3xl font-black">Just Mint</p>
        <input
          placeholder="Recipient Address"
          className="mt-8 border rounded p-4"
          onChange={(e) =>
            updateFormInput({ ...formInput, recipient: e.target.value })
          }
        />
        <input
          placeholder="Metadata URI"
          className="mt-8 border rounded p-4"
          onChange={(e) =>
            updateFormInput({ ...formInput, theUrl: e.target.value })
          }
        />

        <p>&nbsp;</p>

        <br />
        <button
          onClick={createNft}
          className="font-bold mt-4 bg-pink-500 text-white rounded p-4 shadow-lg"
        >
          Just Mint Create Stx NFT
        </button>
        <p>&nbsp;</p>
        {!loggedIn && (
          <button
            className="bg-white-500 hover:bg-gray-300 border-black border-2 font-bold py-2 px-4 rounded mb-6"
            onClick={() => authenticate()}
          >
            Connect to Wallet
          </button>
        )}

        <p>&nbsp;</p>
        <h1>TXID: {txId}</h1>
        <p>&nbsp;</p>
        <Link href="/nft/transactions">Transactions!</Link>
        <p>&nbsp;</p>
        <p>&nbsp;</p>
      </div>
    </div>
  );
}
